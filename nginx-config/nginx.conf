# =============================================================================
# Nginx Configuration for Replay Design Score App
# pgvector + Meilisearch + n8n 統合リバースプロキシ
# =============================================================================

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# イベント設定
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP設定
http {
    # MIME設定
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # ログ設定
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # パフォーマンス設定
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;
    
    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # アップストリーム定義
    upstream n8n_backend {
        server n8n:5678 max_fails=3 fail_timeout=30s;
    }
    
    upstream meilisearch_backend {
        server meilisearch:7700 max_fails=3 fail_timeout=30s;
    }
    
    upstream postgres_backend {
        server postgres:5432 max_fails=3 fail_timeout=30s;
    }
    
    # レート制限設定
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    
    # =============================================================================
    # メインサーバー設定
    # =============================================================================
    server {
        listen 80;
        server_name localhost _;
        
        # セキュリティ設定
        server_tokens off;
        
        # 基本的なセキュリティヘッダー
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        
        # ルートへのアクセス
        location / {
            return 200 '
            <!DOCTYPE html>
            <html>
            <head>
                <title>Replay Design Score App - Service Gateway</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                    .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                    h1 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }
                    .service { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007acc; }
                    .service h3 { margin: 0 0 10px 0; color: #007acc; }
                    .service p { margin: 5px 0; color: #666; }
                    .service a { color: #007acc; text-decoration: none; font-weight: bold; }
                    .service a:hover { text-decoration: underline; }
                    .status { display: inline-block; padding: 2px 8px; border-radius: 12px; font-size: 12px; }
                    .status.healthy { background: #d4edda; color: #155724; }
                    .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>🚀 Replay Design Score App</h1>
                    <p>統合サービスゲートウェイ - pgvector + Meilisearch + n8n</p>
                    
                    <div class="service">
                        <h3>🔄 n8n ワークフロー <span class="status healthy">稼働中</span></h3>
                        <p>Claude API連携とデータ処理の自動化</p>
                        <p><a href="/n8n" target="_blank">n8n管理画面を開く →</a></p>
                    </div>
                    
                    <div class="service">
                        <h3>🔍 Meilisearch 検索エンジン <span class="status healthy">稼働中</span></h3>
                        <p>日本語対応の高速テキスト検索</p>
                        <p><a href="/search" target="_blank">Meilisearch管理画面を開く →</a></p>
                    </div>
                    
                    <div class="service">
                        <h3>📊 API エンドポイント <span class="status healthy">稼働中</span></h3>
                        <p>埋め込み検索とデータベースアクセス</p>
                        <p><a href="/api/health">ヘルスチェック</a> | <a href="/api/docs">API ドキュメント</a></p>
                    </div>
                    
                    <div class="service">
                        <h3>🗄️ データベース管理 <span class="status healthy">稼働中</span></h3>
                        <p>PostgreSQL + pgvector 管理</p>
                        <p><a href="/pgadmin" target="_blank">pgAdmin を開く →</a></p>
                    </div>
                    
                    <div class="footer">
                        <p>🤖 Claude API + OpenAI Embedding + pgvector の統合システム</p>
                    </div>
                </div>
            </body>
            </html>';
            add_header Content-Type text/html;
        }
        
        # =============================================================================
        # n8n ワークフロー管理
        # =============================================================================
        location /n8n {
            rewrite ^/n8n(/.*)$ $1 break;
            proxy_pass http://n8n_backend;
            
            # プロキシヘッダー
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # WebSocket設定
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # タイムアウト設定
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # レート制限
            limit_req zone=api burst=20 nodelay;
        }
        
        # n8n webhook エンドポイント
        location /webhook {
            proxy_pass http://n8n_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # レート制限緩和（webhook用）
            limit_req zone=upload burst=10 nodelay;
        }
        
        # =============================================================================
        # Meilisearch 検索エンジン
        # =============================================================================
        location /search {
            rewrite ^/search(/.*)$ $1 break;
            proxy_pass http://meilisearch_backend;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS設定
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type, Authorization";
            
            # OPTIONSプリフライトリクエスト
            if ($request_method = OPTIONS) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                return 204;
            }
            
            # レート制限
            limit_req zone=api burst=50 nodelay;
        }
        
        # =============================================================================
        # API エンドポイント
        # =============================================================================
        location /api {
            # 実際のアプリケーション（Next.js など）にプロキシする場合
            # proxy_pass http://nextjs_app:3000;
            
            # 開発時はモックレスポンス
            location /api/health {
                return 200 '{"status":"healthy","timestamp":"$time_iso8601","services":{"postgres":"healthy","meilisearch":"healthy","n8n":"healthy","redis":"healthy"}}';
                add_header Content-Type application/json;
            }
            
            location /api/docs {
                return 200 '{"message":"API Documentation","endpoints":["/api/health","/api/embeddings/search","/api/claude/process","/api/upload"]}';
                add_header Content-Type application/json;
            }
            
            # 埋め込み検索API（開発時）
            location /api/embeddings {
                limit_req zone=api burst=20 nodelay;
                return 200 '{"message":"Embedding search endpoint","note":"Connect to your application"}';
                add_header Content-Type application/json;
            }
            
            # アップロードAPI
            location /api/upload {
                limit_req zone=upload burst=5 nodelay;
                client_max_body_size 50M;
                return 200 '{"message":"Upload endpoint","max_size":"50MB"}';
                add_header Content-Type application/json;
            }
        }
        
        # =============================================================================
        # 管理ツール
        # =============================================================================
        
        # pgAdmin データベース管理
        location /pgadmin {
            rewrite ^/pgadmin(/.*)$ $1 break;
            proxy_pass http://pgadmin:5050;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Script-Name /pgadmin;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # =============================================================================
        # 静的ファイル・アセット
        # =============================================================================
        location /static {
            # 静的ファイル配信設定
            root /var/www;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        location /uploads {
            # アップロードファイル配信
            root /var/www;
            expires 30d;
            add_header Cache-Control "public";
        }
        
        # =============================================================================
        # ヘルスチェック・モニタリング
        # =============================================================================
        location /health {
            access_log off;
            return 200 "healthy\\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }
        
        # =============================================================================
        # エラーハンドリング
        # =============================================================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error":"Not Found","message":"The requested resource was not found"}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error":"Internal Server Error","message":"Something went wrong"}';
            add_header Content-Type application/json;
        }
        
        # ファビコンエラー無視
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        
        # ロボットファイル
        location = /robots.txt {
            return 200 "User-agent: *\\nDisallow: /";
            add_header Content-Type text/plain;
        }
    }
    
    # =============================================================================
    # SSL/HTTPS設定（本番環境用）
    # =============================================================================
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/private.key;
    #     
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     
    #     add_header Strict-Transport-Security "max-age=63072000" always;
    #     
    #     # 上記のlocation設定をここにコピー
    # }
}